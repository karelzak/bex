/*
 * bex.h - libbex API
 *
 * Copyright (C) 2018 Karel Zak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef _LIBBEX_BEX_H
#define _LIBBEX_BEX_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdint.h>
#include <sys/types.h>

#define LIBBEX_VERSION   "@LIBBEX_VERSION@"
#define LIBBEX_MAJOR_VERSION   @LIBBEX_MAJOR_VERSION@
#define LIBBEX_MINOR_VERSION   @LIBBEX_MINOR_VERSION@
#define LIBBEX_PATCH_VERSION   @LIBBEX_PATCH_VERSION@

/* paths */
#define LIBBEX_DEFAULT_URI	"wss://api.bitfinex.com/ws/2"

struct libbex_repo;
struct libbex_domain;

/**
 * libmnt_iter:
 *
 * Generic iterator (stores state about lists)
 */
struct libmnt_iter;

#ifndef __GNUC_PREREQ
# if defined __GNUC__ && defined __GNUC_MINOR__
#  define __GNUC_PREREQ(maj, min)  ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
# else
#  define __GNUC_PREREQ(maj, min) 0
# endif
#endif

#ifndef __bex_attribute__
# if __GNUC_PREREQ (3, 4)
#  define __bex_attribute__(_a_) __attribute__(_a_)
# else
#  define __bex_attribute__(_a_)
# endif
#endif


/**
 * libbex_event
 *
 * Platform events handler
 */
struct libbex_event;

/**
 * libbex_platform
 *
 * The platform
 */
struct libbex_platform;

/**
 * libbex_value
 *
 */
struct libbex_value;

/**
 * libbex_array
 *
 */
struct libbex_array;

/**
 * libbex_event
 *
 */
struct libbex_event;


/* init.c */
extern void bex_init_debug(int mask);

/* version.c */
extern int bex_parse_version_string(const char *ver_string);
extern int bex_get_library_version(const char **ver_string);

/* iter.c */
enum {

	BEX_ITER_FORWARD = 0,
	BEX_ITER_BACKWARD
};
extern struct libbex_iter *bex_new_iter(int direction)
			__bex_attribute__((warn_unused_result));
extern void bex_free_iter(struct libbex_iter *itr);

extern void bex_reset_iter(struct libbex_iter *itr, int direction)
			__bex_attribute__((nonnull));
extern int bex_iter_get_direction(struct libbex_iter *itr)
			__bex_attribute__((nonnull));

/* event.c */
extern struct libbex_event *bex_new_event(const char *name);
extern void bex_ref_event(struct libbex_event *ev);
extern void bex_unref_event(struct libbex_event *ev);
extern int bex_event_add_value(struct libbex_event *ev, struct libbex_value *va);
extern int bex_event_remove_value(struct libbex_event *ev, struct libbex_value *va);
extern int bex_event_add_reply(struct libbex_event *ev, struct libbex_value *va);
extern int bex_event_remove_reply(struct libbex_event *ev, struct libbex_value *va);
extern struct libbex_array *bex_event_get_values(struct libbex_event *ev);
extern struct libbex_array *bex_event_get_replies(struct libbex_event *ev);
extern int bex_event_set_reply_callback(struct libbex_event *ev,
                int (*fn)(struct libbex_platform *, struct libbex_event *));
extern int bex_event_set_data(struct libbex_event *ev, void *dt);
extern void *bex_event_get_data(struct libbex_event *ev);

/* platform.c */
extern struct libbex_platform *bex_new_platform(const char *uri);
extern void bex_ref_platform(struct libbex_platform *pl);
extern void bex_unref_platform(struct libbex_platform *pl);
extern int bex_platform_remove_event(struct libbex_platform *pl, struct libbex_event *ex);
extern int bex_platform_add_event(struct libbex_platform *pl, struct libbex_event *ev);
extern int bex_platform_next_event(struct libbex_platform *pl, struct libbex_iter *itr, struct libbex_event **ev);
extern struct libbex_event *bex_platform_get_event(struct libbex_platform *pl, const char *name);
extern int bex_platform_emit_event(struct libbex_platform *pl, struct libbex_event *ev);
extern int bex_platform_receive_event(struct libbex_platform *pl, struct libbex_event *ev);
extern int bex_platform_connect(struct libbex_platform *pl);
extern int bex_platform_disconnect(struct libbex_platform *pl);
extern int bex_platform_send(struct libbex_platform *pl, unsigned char *str, size_t sz);
extern int bex_platform_service(struct libbex_platform *pl);
extern int bex_platform_receive(struct libbex_platform *pl, unsigned char *str);


/* array.c */
extern struct libbex_array *bex_new_array(size_t sz);
extern void bex_ref_array(struct libbex_array *ar);
extern void bex_unref_array(struct libbex_array *ar);
extern int bex_array_add(struct libbex_array *ar, struct libbex_value *va);
extern int bex_array_remove(struct libbex_array *ar, struct libbex_value *va);
extern struct libbex_value *bex_array_get(struct libbex_array *ar, const char *name);
extern struct libbex_value *bex_array_nget(struct libbex_array *ar, const char *name, size_t n);
extern int bex_array_to_stream(struct libbex_array *ar, FILE *stream);
extern int bex_array_is_empty(struct libbex_array *ar);
extern int bex_array_fill_from_string(struct libbex_array *ar, const char *str);

/* value */
extern struct libbex_value *bex_new_value(const char *name);
extern void bex_ref_value(struct libbex_value *va);
extern void bex_unref_value(struct libbex_value *va);
extern int bex_value_set_u64_data(struct libbex_value *va, uint64_t num);
extern struct libbex_value *bex_new_value_u64(const char *name, uint64_t n);
extern int bex_value_set_s64_data(struct libbex_value *va, int64_t num);
extern struct libbex_value *bex_new_value_s64(const char *name, int64_t n);
extern int bex_value_set_str_data(struct libbex_value *va, const char *str);
extern struct libbex_value *bex_new_value_str(const char *name, const char *str);

#ifdef __cplusplus
}
#endif

#endif /* _LIBBEX_BEX_H */
