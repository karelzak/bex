/*
 * bex.h - libbex API
 *
 * Copyright (C) 2018 Karel Zak <kzak@redhat.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

#ifndef _LIBBEX_BEX_H
#define _LIBBEX_BEX_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <mntent.h>
#include <sys/types.h>

#define LIBBEX_VERSION   "@LIBBEX_VERSION@"
#define LIBBEX_MAJOR_VERSION   @LIBBEX_MAJOR_VERSION@
#define LIBBEX_MINOR_VERSION   @LIBBEX_MINOR_VERSION@
#define LIBBEX_PATCH_VERSION   @LIBBEX_PATCH_VERSION@

/* paths */
#define LIBBEX_PATH_REPODIR	".bex"

struct libbex_repo;
struct libbex_domain;

/**
 * libmnt_iter:
 *
 * Generic iterator (stores state about lists)
 */
struct libmnt_iter;

#ifndef __GNUC_PREREQ
# if defined __GNUC__ && defined __GNUC_MINOR__
#  define __GNUC_PREREQ(maj, min)  ((__GNUC__ << 16) + __GNUC_MINOR__ >= ((maj) << 16) + (min))
# else
#  define __GNUC_PREREQ(maj, min) 0
# endif
#endif

#ifndef __bex_attribute__
# if __GNUC_PREREQ (3, 4)
#  define __bex_attribute__(_a_) __attribute__(_a_)
# else
#  define __bex_attribute__(_a_)
# endif
#endif


/* init.c */
extern void bex_init_debug(int mask);

/* version.c */
extern int bex_parse_version_string(const char *ver_string);
extern int bex_get_library_version(const char **ver_string);

/* iter.c */
enum {

	BEX_ITER_FORWARD = 0,
	BEX_ITER_BACKWARD
};
extern struct libbex_iter *bex_new_iter(int direction)
			__bex_attribute__((warn_unused_result));
extern void bex_free_iter(struct libbex_iter *itr);

extern void bex_reset_iter(struct libbex_iter *itr, int direction)
			__bex_attribute__((nonnull));
extern int bex_iter_get_direction(struct libbex_iter *itr)
			__bex_attribute__((nonnull));

#ifdef __cplusplus
}
#endif

#endif /* _LIBBEX_BEX_H */
